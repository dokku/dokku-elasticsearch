#!/usr/bin/env bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/config"
[[ " help $PLUGIN_COMMAND_PREFIX:help " == *" $1 "* ]] || [[ "$1" == "$PLUGIN_COMMAND_PREFIX:"* ]] || exit "$DOKKU_NOT_IMPLEMENTED_EXIT"
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

PLUGIN_BASE_PATH="$PLUGIN_PATH"
if [[ -n $DOKKU_API_VERSION ]]; then
  PLUGIN_BASE_PATH="$PLUGIN_ENABLED_PATH"
fi
source "$PLUGIN_BASE_PATH/common/functions"
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/functions"

if [[ ! -d $PLUGIN_DATA_ROOT ]]; then
  dokku_log_fail "$PLUGIN_SERVICE: Please run: sudo dokku plugin:install"
fi

if [[ -d "$PLUGIN_DATA_ROOT/*" ]]; then
  rm -rf "${PLUGIN_DATA_ROOT:?}/*"
fi

case "$1" in
  $PLUGIN_COMMAND_PREFIX:create)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    [[ ! -d "$PLUGIN_DATA_ROOT/$2" ]] || dokku_log_fail "$PLUGIN_SERVICE service $2 already exists"
    SERVICE="$2"; SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"; LINKS_FILE="$SERVICE_ROOT/LINKS"

    if [[ -n $3 ]]; then
      PLUGIN_IMAGE=$(echo $3 | sed -e 's/:.*//')
      PLUGIN_IMAGE_VERSION=$(echo $3 | sed -e 's/.*://')
    fi

    if ! docker images | grep -e "^$PLUGIN_IMAGE " | grep -q " $PLUGIN_IMAGE_VERSION " ; then
      docker pull "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" || dokku_log_fail "$PLUGIN_SERVICE image $PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION pull failed"
    fi

    mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
    mkdir -p "$SERVICE_ROOT/data" || dokku_log_fail "Unable to create service data directory"
    mkdir -p "$SERVICE_ROOT/config" || dokku_log_fail "Unable to create service config directory"
    touch "$LINKS_FILE"

    if [[ -n $ELASTICSEARCH_CUSTOM_ENV ]]; then
      echo "$ELASTICSEARCH_CUSTOM_ENV" | tr ';' "\n" > "$SERVICE_ROOT/ENV"
    else
      echo "" > "$SERVICE_ROOT/ENV"
    fi
    service_create_container "$SERVICE"
    ;;

  $PLUGIN_COMMAND_PREFIX:destroy)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    SERVICE="$2"; SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"; LINKS_FILE="$SERVICE_ROOT/LINKS"
    SERVICE_NAME="$(get_service_name "$SERVICE")"

    [[ -s "$LINKS_FILE" ]] && dokku_log_fail "Cannot delete linked service"
    
    if [[ "$3" == "force" ]]; then
      DOKKU_APPS_FORCE_DELETE=1
    fi

    if [[ -z "$DOKKU_APPS_FORCE_DELETE" ]]; then
      dokku_log_warn "WARNING: Potentially Destructive Action"
      dokku_log_warn "This command will destroy $SERVICE $PLUGIN_SERVICE service."
      dokku_log_warn "To proceed, type \"$SERVICE\""
      echo ""

      read -rp "> " service_name
      if [[ "$service_name" != "$SERVICE" ]]; then
        dokku_log_warn "Confirmation did not match $SERVICE. Aborted."
        exit 1
      fi
    fi

    dokku_log_info1 "Deleting $SERVICE"
    if [[ -n $(docker ps -aq -f name="$SERVICE_NAME") ]]; then
      dokku_log_verbose_quiet "Deleting container data"
      service_stop "$SERVICE"
      sleep 1

      dokku_log_verbose_quiet "Removing container"
      docker rm -v "$SERVICE_NAME" > /dev/null
      sleep 1
    else
      dokku_log_verbose_quiet "No container exists for $SERVICE"
    fi

    dokku_log_verbose_quiet "Removing data"
    docker run --rm -v "$SERVICE_ROOT/data:/data" "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" chmod 777 -R /data
    rm -rf "$SERVICE_ROOT"

    dokku_log_info2 "$PLUGIN_SERVICE container deleted: $SERVICE"
    ;;

  $PLUGIN_COMMAND_PREFIX:link)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    [[ -z $3 ]] && dokku_log_fail "Please specify an app to run the command on"
    verify_app_name "$3"
    verify_service_name "$2"
    service_link "$2" "$3"
    ;;

  $PLUGIN_COMMAND_PREFIX:unlink)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    [[ -z $3 ]] && dokku_log_fail "Please specify an app to run the command on"
    verify_app_name "$3"
    verify_service_name "$2"
    service_unlink "$2" "$3"
    ;;

  $PLUGIN_COMMAND_PREFIX:export)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    SERVICE="$2"; SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"

    dokku_log_fail "Not yet implemented"
    ;;

  $PLUGIN_COMMAND_PREFIX:import)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    SERVICE="$2"

    dokku_log_fail "Not yet implemented"
    ;;

  $PLUGIN_COMMAND_PREFIX:logs)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_logs "$2" "$3"
    ;;

  $PLUGIN_COMMAND_PREFIX:start)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_start "$2"
    ;;

  $PLUGIN_COMMAND_PREFIX:stop)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_stop "$2"
    ;;

  $PLUGIN_COMMAND_PREFIX:restart)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_stop "$2"
    service_start "$2"
    dokku_log_info1 "Please call dokku ps:restart on all linked apps"
    ;;

  $PLUGIN_COMMAND_PREFIX:connect)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    SERVICE="$2"; SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"

    dokku_log_fail "Not yet implemented"
    ;;

  $PLUGIN_COMMAND_PREFIX:info)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_info "$2"
    ;;

  $PLUGIN_COMMAND_PREFIX:list)
    service_list
    ;;

  $PLUGIN_COMMAND_PREFIX:clone)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    SERVICE="$2"

    dokku_log_fail "Not yet implemented"
    ;;

  $PLUGIN_COMMAND_PREFIX:expose)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_port_expose "$2" "${@:3}"
    ;;

  $PLUGIN_COMMAND_PREFIX:unexpose)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_port_unexpose "$2"
    ;;

  $PLUGIN_COMMAND_PREFIX:promote)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    [[ -z $3 ]] && dokku_log_fail "Please specify an app to run the command on"
    verify_service_name "$2"
    verify_app_name "$3"
    promote "$2" "$3"
    ;;

  help | $PLUGIN_COMMAND_PREFIX:help)
    HELP=$(cat<<EOF
    $PLUGIN_COMMAND_PREFIX:create <name> [<image:version>], Create a $PLUGIN_SERVICE service
    $PLUGIN_COMMAND_PREFIX:destroy <name>, Delete the $PLUGIN_SERVICE service and stop its container if there are no links left
    $PLUGIN_COMMAND_PREFIX:link <name> <app>, Link the $PLUGIN_SERVICE service to the app
    $PLUGIN_COMMAND_PREFIX:unlink <name> <app>, Unlink the $PLUGIN_SERVICE service from the app
    $PLUGIN_COMMAND_PREFIX:export <name>, NOT IMPLEMENTED
    $PLUGIN_COMMAND_PREFIX:import <name> <file>, NOT IMPLEMENTED
    $PLUGIN_COMMAND_PREFIX:connect <name>, NOT IMPLEMENTED
    $PLUGIN_COMMAND_PREFIX:logs <name> [-t], Print the most recent log(s) for this service
    $PLUGIN_COMMAND_PREFIX:restart <name>, Graceful shutdown and restart of the $PLUGIN_SERVICE service container
    $PLUGIN_COMMAND_PREFIX:info <name>, Print the connection information
    $PLUGIN_COMMAND_PREFIX:list, List all $PLUGIN_SERVICE services
    $PLUGIN_COMMAND_PREFIX:clone <name> <new-name>, NOT IMPLEMENTED
    $PLUGIN_COMMAND_PREFIX:expose <name> [port], Expose a $PLUGIN_SERVICE service on custom port if provided (random port otherwise)
    $PLUGIN_COMMAND_PREFIX:unexpose <name>, Unexpose a previously exposed $PLUGIN_SERVICE service
    $PLUGIN_COMMAND_PREFIX:start <name>, Start a previously stopped $PLUGIN_SERVICE service
    $PLUGIN_COMMAND_PREFIX:stop <name>, Stop a running $PLUGIN_SERVICE service
    $PLUGIN_COMMAND_PREFIX:promote <name> <app>, Promote service <name> as ${PLUGIN_DEFAULT_ALIAS}_URL in <app>
EOF
)
    if [[ -n $DOKKU_API_VERSION ]]; then
      echo "$HELP"
    else
      cat && echo "$HELP"
    fi
    ;;

  *)
    exit "$DOKKU_NOT_IMPLEMENTED_EXIT"
    ;;

esac
