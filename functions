#!/usr/bin/env bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/config"
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common-functions"
source "$PLUGIN_AVAILABLE_PATH/config/functions"
if [[ -f "$PLUGIN_AVAILABLE_PATH/docker-options/functions" ]]; then
  source "$PLUGIN_AVAILABLE_PATH/docker-options/functions"
fi

# non-generic functions

service_create() {
  local SERVICE="$1"
  [[ -z "$SERVICE" ]] && dokku_log_fail "Please specify a name for the service"
  [[ ! -d "$PLUGIN_DATA_ROOT/$SERVICE" ]] || dokku_log_fail "$PLUGIN_SERVICE service $SERVICE already exists"
  SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"; LINKS_FILE="$SERVICE_ROOT/LINKS"

  if ! docker images | grep -e "^$PLUGIN_IMAGE " | grep -q " $PLUGIN_IMAGE_VERSION " ; then
    docker pull "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" || dokku_log_fail "$PLUGIN_SERVICE image $PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION pull failed"
  fi

  mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
  mkdir -p "$SERVICE_ROOT/data" || dokku_log_fail "Unable to create service data directory"
  mkdir -p "$SERVICE_ROOT/config" || dokku_log_fail "Unable to create service config directory"
  touch "$LINKS_FILE"

  if [[ -n $ELASTICSEARCH_CUSTOM_ENV ]]; then
    echo "$ELASTICSEARCH_CUSTOM_ENV" | tr ';' "\n" > "$SERVICE_ROOT/ENV"
  else
    echo "" > "$SERVICE_ROOT/ENV"
  fi
  service_create_container "$SERVICE"
}

service_create_container() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"

  ID=$(docker run --name "$SERVICE_NAME" -v "$SERVICE_ROOT/data:/usr/share/elasticsearch/data" -v "$SERVICE_ROOT/config:/usr/share/elasticsearch/config" --env-file="$SERVICE_ROOT/ENV" -d --restart always --label dokku=service --label dokku.service=elasticsearch "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION")
  echo "$ID" > "$SERVICE_ROOT/ID"

  dokku_log_info2 "Copying config files into place"
  retry-docker-command "$ID" "cp -arfp --no-clobber /etc/elasticsearch/. /usr/share/elasticsearch/config/"
  retry-docker-command "$ID" "echo 'network.host: 0.0.0.0' >> /usr/share/elasticsearch/config/elasticsearch.yml"
  retry-docker-command "$ID" "rm -rf /etc/elasticsearch && ln -sfn /usr/share/elasticsearch/config /etc/elasticsearch"
  retry-docker-command "$ID" "chown -R root:elasticsearch /etc/elasticsearch"
  docker restart "$ID" > /dev/null

  dokku_log_verbose_quiet "Waiting for container to be ready"
  docker run --rm --link "$SERVICE_NAME:$PLUGIN_COMMAND_PREFIX" dokkupaas/wait > /dev/null

  dokku_log_info2 "$PLUGIN_SERVICE container created: $SERVICE"
  service_info "$SERVICE"
}

retry-docker-command() {
  local ID="$1" COMMAND="$2"
  local i=0 success=false
  until [ $i -ge 10 ]; do
    set +e; docker exec -it "$ID" bash -c "$COMMAND" 2> /dev/null; exit_code=$? ; set -e
    if [[ "$exit_code" == 0 ]]; then
      success=true
      break
    fi
    i=$(( i + 1 ))
    sleep 1
  done
  if [[ $i -gt 0 ]]; then
    dokku_log_verbose "Container command retried ${i} time(s): ${COMMAND}"
  fi
  [[ "$success" == "true" ]] || dokku_log_fail "Failed to run command: ${COMMAND}"
}

service_export() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"

  dokku_log_fail "Not yet implemented"
}

service_import() {
  local SERVICE="$1"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"

  dokku_log_fail "Not yet implemented"
}

service_start() {
  local SERVICE="$1"
  local QUIET="$2"
  local SERVICE_ROOT="$PLUGIN_DATA_ROOT/$SERVICE"
  local SERVICE_NAME="$(get_service_name "$SERVICE")"
  local ID=$(docker ps -f status=running | grep -e "$SERVICE_NAME$" | awk '{print $1}') || true
  if [[ -n $ID ]]; then
    [[ -z $QUIET ]] && dokku_log_warn "Service is already started"
    return 0
  fi

  dokku_log_info1_quiet "Starting container"
  local PREVIOUS_ID=$(docker ps -f status=exited | grep -e "$SERVICE_NAME$" | awk '{print $1}') || true
  local IMAGE_EXISTS=$(docker images | grep -e "^$PLUGIN_IMAGE " | grep -q " $PLUGIN_IMAGE_VERSION " && true)

  if [[ -n $PREVIOUS_ID ]]; then
    docker start "$PREVIOUS_ID" > /dev/null
    service_port_unpause "$SERVICE"
    dokku_log_info2 "Container started"
  elif $IMAGE_EXISTS; then
    service_create_container "$SERVICE"
  else
    dokku_log_verbose_quiet "Neither container nor valid configuration exists for $SERVICE"
  fi
}

service_url() {
  local SERVICE="$1"
  local SERVICE_ALIAS="$(service_alias "$SERVICE")"
  echo "$PLUGIN_SCHEME://$SERVICE_ALIAS:${PLUGIN_DATASTORE_PORTS[0]}"
}

update_plugin_scheme_for_app() {
  local APP="$1"
  local ELASTICSEARCH_DATABASE_SCHEME=$(config_get "$APP" ELASTICSEARCH_DATABASE_SCHEME)
  PLUGIN_SCHEME=${ELASTICSEARCH_DATABASE_SCHEME:-$PLUGIN_SCHEME}
}
